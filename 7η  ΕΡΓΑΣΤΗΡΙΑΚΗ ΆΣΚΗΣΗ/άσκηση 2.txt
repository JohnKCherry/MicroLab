.include "m16def.inc"
.def temp = r16
.def input = r17
.def counter = r18
.def monades = r19
.def dekades = r20
.def ekatontades = r21
.def proshmo = r22

.org 0
rjmp reset
	
reset:
	ldi temp, low(RAMEND)				;arxikopoihsh tou deikth ths stoibas
	out spl, temp
	ldi temp, high(RAMEND)
	out sph, temp
	ldi temp, 0b11111100				;gia thn lcd
	out DDRD, temp
	clr temp
	out DDRA, temp						
	rcall lcd_init    				;arxikopoihsh ths lcd
main:
	in input, PINA					;diavasma apo thn PORTA
	rcall printBinary				;ektupwsh tou oktadikou 
	ldi r24, 0b111101				;ektupwnoume to '='
	rcall lcd_data

	ldi r24,0x20
	rcall lcd_data
	ldi r24,0x20
	rcall lcd_data
	ldi r24,0x20
	rcall lcd_data
	ldi r24,0x20
	rcall lcd_data

	ldi r24,0x89
	rcall lcd_command
	rcall binary_to_dec				;metatrepoume ton arithmo pou diavasame se dekadikh morfh (ekatontades)(dekades)(monades) kai apothikeuoume ston 										;kataxwrhth "proshmo" ton kwdika ascii tou + h - analoga an einai thetikos h arnhtikos
	rcall print_dec					;ektupwnoume ton arithmo se dekadikh morfh (me to proshmo tou an einai mh mhdenikos)
	rjmp main					;h diadikasia einai sunexhs
	
printBinary:								
	push input							
	ldi r24,0x80					;bazoume ton AC deikth ths DDRAM sthn arxh oste na emfanisei apo thn arxh sthn othonh lcd
	rcall lcd_command
	ldi r24 ,low(1530)					
	ldi r25 ,high(1530) 
	rcall wait_usec 
	ldi counter, 8					;8 epanalipseis oste na emfanistoun ola ta psifia
out_loop:
	rol input					;aristerh olisthish gia na tupwsoume ta bit apo aristera pros ta deksia
	brcs print1						
print0:							;ektuposh tou 0
	ldi r24, 48
	rcall lcd_data
	rjmp end_loop
print1:							;ektuposh tou 1
	ldi r24, 49
	rcall lcd_data
end_loop:
	dec counter	
	brne out_loop					
	pop input					;epanaferoume thn timh tou input
	ret  
	
binary_to_dec:
	mov temp, input
	rol temp					 ;kanoume aristerh olisthish gia na elegksoume an to aristero bit einai 0(thetikos) h 1(arnhtikos)
	brcs arnhtikos
thetikos:
	ldi proshmo, 43                                 ;43 = "+"
	rjmp ekat_dek						 
arnhtikos:
	ldi proshmo, 45					 ;45 = "-"
	com input
ekat_dek:						;h euresh ton monadon dekadon ekatontadon ginetai me thn klassikh methodo pou exoume xrhsimopoihsei arketes fores
	ldi dekades, 0xff					
	ldi ekatontades, 0xff
ekat:
	inc ekatontades
	subi input, 0x64					
	brge ekat
	ldi temp, 0x64
	add input, temp					
dek:
	inc dekades
	subi input, 0x0a				
	brge dek
	ldi temp, 0x0a
	add input, temp					
mon:
	mov monades, input
	ret
	
print_dec:								
	ldi temp, 0							
	mov temp, monades
	add temp, dekades
	add temp, ekatontades					
	tst temp					;an to athrisma ton monadon+dekades+ekatontades=0 tote den exei dothei arithmos
	brne prnte
	ldi r24, 48
	//mov r24, temp
	rcall lcd_data
	rjmp end_print
prnte:
	ldi temp,48					;apothikeuoume ston temp thn timh 48, gia xrhsh ston upologismo kwdikwn ascii																						
											 
	mov r24, proshmo				;an exoume kapoion arithmo ektos tou 0, ektupwnei an einai thetikos h arnhtikos
	rcall lcd_data
	tst ekatontades
	breq testd					;an oi ekatontades einai 0, elegxoume tis dekades (testd)
	add ekatontades, temp
	mov r24, ekatontades				;alliws tis emfanizoume kai proxwrame sthn emfanish twn dekadwn kai twn monadwn.
	rcall lcd_data
	rjmp prntd
testd:
	tst dekades					;an oi ekatontades einai 0, tote elegxoume tis dekades. an einai mhden tote emfanizoume
	breq prntm					;tis monades (pou de tha einai mhden afou mphkame edw), alliws emfanizoume dekades kai monades.
prntd:
	ldi temp,48								
	add dekades, temp
	mov r24, dekades
	rcall lcd_data
prntm:
	ldi temp,48								
	add monades, temp
	mov r24, monades
	rcall lcd_data
end_print:
	ret
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

wait_usec:    
	sbiw r24, 1
	nop
	nop
	nop
	nop
	brne wait_usec
	ret

wait_msec: 
	push r24
	push r25
	ldi r24, low(998)
	ldi r25, high(998)
	rcall wait_usec
	pop r25
	pop r24
	sbiw r24, 1
	brne wait_msec
	ret

write_2_nibbles:
	push r24
	in r25, PIND 
	andi r25, 0x0f 
	andi r24, 0xf0 
	add r24, r25 
	out PORTD, r24
	sbi PORTD, PD3
	cbi PORTD, PD3
	pop r24 
	swap r24 
	andi r24, 0xf0 
	add r24, r25
	out PORTD, r24
	sbi PORTD, PD3 
	cbi PORTD, PD3
	ret
	
lcd_data:
	sbi PORTD, PD2 
	rcall write_2_nibbles 
	ldi r24, 43 
	ldi r25, 0 
	rcall wait_usec
	ret	
	
lcd_command:
	cbi PORTD ,PD2 
	rcall write_2_nibbles 
	ldi r24, 39 
	ldi r25, 0 
	rcall wait_usec 
	ret	
	
lcd_init:
	ldi r24, 40 
	ldi r25, 0 
	rcall wait_msec 
	ldi r24, 0x30 
	out PORTD, r24 
	sbi PORTD, PD3 
	cbi PORTD, PD3 
	ldi r24, 39
	ldi r25, 0 
	rcall wait_usec 
	ldi r24, 0x30
	out PORTD, r24
	sbi PORTD, PD3
	cbi PORTD, PD3
	ldi r24, 39
	ldi r25, 0
	rcall wait_usec
	ldi r24, 0x20 
	out PORTD, r24
	sbi PORTD, PD3
	cbi PORTD, PD3
	ldi r24, 39
	ldi r25, 0
	rcall wait_usec
	ldi r24, 0x28 
	rcall lcd_command 
	ldi r24, 0x0c 
	rcall lcd_command
	ldi r24, 0x01 
	rcall lcd_command
	ldi r24, low(1530)
	ldi r25, high(1530)
	rcall wait_usec
	ldi r24, 0x06 
	rcall lcd_command 
	ret
