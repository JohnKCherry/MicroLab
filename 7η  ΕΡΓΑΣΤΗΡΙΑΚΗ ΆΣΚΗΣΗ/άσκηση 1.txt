.include "m16def.inc"							
.def temp = r16
.def input = r17
.def flag = r18
.def counter = r19
.equ time = 26473					    ; o akeraios arithmos pou tha dosei 5sec xronokathisterisi

.DSEG
_tmp_: .byte 2 

 .CSEG

.org 0									; meta apo reset
jmp reset
.org 0x10								; orismos dieuthinshs routinas diakophs
jmp timer_routine
reset:
	ldi temp, high(ramend)				; arxikopoihsh deikth stoivas afou kalountai routines
	out sph, temp
	ldi temp, low(ramend)
	out spl, temp
	clr temp
	out DDRB, temp						; h thura PORTB ws EISODOS
	out PORTB, temp
	ldi temp, 0b11110000
	out DDRC, temp
	ser temp
	out DDRA, temp						; h thura PORTA  ws  EKSODOS
	ldi temp, 0b11111111
	out DDRD, temp						; h thura PORTD orizetai katallhla gia thn epikoinwnia ths me thn LCD
	ser flag								   

	rcall lcd_init						; klhsh routinas arxikopoihshs lcd, gia na xrisimopoihsoume thn othonh
	ldi r24, 20							; orismos spinthirismou ****
	rcall scan_keypad_rising_edge		; klhsh gia thn arxikopoihsh tou _tmp_ se 0000, gia thn xrhsh plhktrologiou
	ldi temp,0b00000101
	out TCCR1B, temp					; thesimo prescaler wste ck / 1024
main:
	in input, PINB
	cpi input, 0						; exei patithei kapoio PB?
	breq main							; an oxi, sunexise na tous elegxeis											

	rcall lcd_init
	rcall setCount						; klhsh routinas energopoihshs timer
	rcall readKeyPad					; klhsh routinas anagnwshs plhktrologiou kai elegxou tou kwdikou
	
	cpi flag, 0
	breq alarmON
	
	rcall passCorrect
	rjmp main


passCorrect:
	ldi r24,0x80						; bazoume ton AC deikth ths DDRAM sthn arxh gia na emfanisei apo thn arxh
	rcall lcd_command
	ldi r24 ,low(40)
	ldi r25 ,high(40) 
	rcall wait_usec 
	rcall alarmOFFMessage
	ret

alarmOFFMessage:
	rjmp next
MessageOFF:
	.db 'A', 'L', 'A', 'R', 'M', ' ', 'O', 'F', 'F', 0x00

next:
	cli									;apenergopoihsh ton diakopon gia na mhn proklithei allh diakoph apo ton timer
	ldi zh, high(MessageOFF*2)
	ldi zl, low(MessageOFF*2)
	ldi counter, 9	
loop0:
	lpm r24, Z
	rcall lcd_data
	adiw zl, 1
	dec counter
	brne loop0
	ret



alarmON:								
	ldi r24,0x80						; bazoume ton AC deikth ths DDRAM sthn arxh
	rcall lcd_command
	ldi r24 ,low(40)
	ldi r25 ,high(40) 
	rcall wait_usec 
	rcall alarmONMessage
eternal:
	ldi r24, low(400)
	ldi r25, high(400)
	rcall leds_on
	rcall wait_msec
	rcall leds_off
	ldi r24, low(100)
	ldi r25, high(100)
	rcall wait_msec
	rjmp eternal
	ret

leds_on:											; routina anamatos twn leds ths thuras PA
	ser temp
	out PORTA, temp
	ret

leds_off:											; routina svhsimatos twn leds ths thuras PB
	clr temp
	out PORTA, temp
	ret

alarmONMessage:
	rjmp next1
MessageON:
	.db 'A', 'L', 'A', 'R', 'M', ' ', 'O', 'N'
next1:
	ldi zh, high(MessageON*2)
	ldi zl, low(MessageON*2)
	ldi counter, 8	
eternal1:
	lpm r24, Z
	rcall lcd_data
	adiw zl, 1
	dec counter
	brne eternal1
	ret

setCount:								
	ldi temp, high(time)				; arxikopoihsh tou TCNT1
	out TCNT1H, temp					; gia uperxeilish meta apo 5 secs
	ldi temp, low(time)
	out TCNT1L, temp
	ldi temp, 1<<TOIE1
	out timsk, temp
	sei									; energopoihsh katholikwn diakopwn me thesimo tou Global Interrupt Enable bit tou Status Register
	ret
	
timer_routine:							; o xrhsths arghse na pathsei kwdiko
	cpi flag, 0						 
	brne epestrepse
	rjmp alarmON						; opote xtupaei o sunagermos
epestrepse:
	reti

readKeyPad:								; routina diavasmatos plhktrologiou kai enhmerwshs flag gia egkurothta kwdikou
	clr flag							; upothetoume oti o kwdikos pou tha lavoume tha einai egkuros
	rcall wait_for_keypad				; ean den paththhke to 1, tote flag = 0
	ser flag
	sbrs r25, 4
	clr flag							; mas exei erthei to 1 kai perimenoume to 1,
	rcall keypad_to_ascii
	rcall lcd_data
	rcall wait_for_keypad				; ean den paththhke to 1, tote flag = 0
	sbrs r25, 4
	clr flag
	rcall keypad_to_ascii
	rcall lcd_data
	rcall wait_for_keypad				; ean den paththhke to 6, tote flag = 0
	sbrs r25, 2
	clr flag
	rcall keypad_to_ascii
	rcall lcd_data
	ret
	
wait_usec:    
	sbiw r24 ,1
	nop
	nop
	nop
	nop
	brne wait_usec
	ret

;***********************************************************************************************

wait_msec: 
	push r24
	push r25
	ldi r24 , low(998)
	ldi r25 , high(998)
	rcall wait_usec
	pop r25
	pop r24
	sbiw r24 , 1
	brne wait_msec
	ret

;***********************************************************************************************

scan_row: 
	ldi r25 , 0x08
back_:
	lsl r25
	dec r24
	brne back_ 
	out PORTC , r25
	nop 
	nop
	in r24 , PINC
	andi r24 ,0x0f
	ret

;***********************************************************************************************

scan_keypad: 
	ldi r24 , 0x01
	rcall scan_row 
	swap r24
	mov r27 , r24
	ldi r24 ,0x02
	rcall scan_row 
	add r27 , r24
	ldi r24 , 0x03
	rcall scan_row 
	swap r24
	mov r26 , r24
	ldi r24 ,0x04
	rcall scan_row 
	add r26 , r24
	movw r24 , r26
	ret

;***********************************************************************************************

scan_keypad_rising_edge: 
	mov r22 ,r24
	rcall scan_keypad									
	push r24											
	push r25
	mov r24 ,r22
	ldi r25 ,0
	rcall wait_msec 
	rcall scan_keypad									
	pop r23
	pop r22 
	and r24 ,r22 
	and r25 ,r23 
	ldi r26 ,low(_tmp_)									
	ldi r27 ,high(_tmp_)
	ld r23 ,X+
	ld r22 ,X
	st X ,r24											
	st -X ,r25
	com r23 
	com r22											
	and r24 ,r22
	and r25 ,r23
	ret

;***********************************************************************************************

wait_for_keypad:
	ldi r24, 20
	rcall scan_keypad_rising_edge
	tst r24
	brne next1
	tst r25
	breq wait_for_keypad
next1:
	ret

;***********************************************************************************************

write_2_nibbles:
	push r24
	in r25, PIND 
	andi r25, 0x0f 
	andi r24, 0xf0 
	add r24, r25 
	out PORTD, r24
	sbi PORTD, PD3
	cbi PORTD, PD3
	pop r24 
	swap r24 
	andi r24, 0xf0 
	add r24, r25
	out PORTD, r24
	sbi PORTD, PD3 
	cbi PORTD, PD3
	ret

;***********************************************************************************************
	
lcd_data:
	sbi PORTD, PD2 
	rcall write_2_nibbles 
	ldi r24, 43 
	ldi r25, 0 
	rcall wait_usec
	ret	

;***********************************************************************************************
	
lcd_command:
	cbi PORTD ,PD2 
	rcall write_2_nibbles 
	ldi r24, 39 
	ldi r25, 0 
	rcall wait_usec 
	ret	

;***********************************************************************************************
	
lcd_init:
	ldi r24, 40 
	ldi r25, 0 
	rcall wait_msec 
	ldi r24, 0x30 
	out PORTD, r24 
	sbi PORTD, PD3 
	cbi PORTD, PD3 
	ldi r24, 39
	ldi r25, 0 
	rcall wait_usec 
	ldi r24, 0x30
	out PORTD, r24
	sbi PORTD, PD3
	cbi PORTD, PD3
	ldi r24, 39
	ldi r25, 0
	rcall wait_usec
	ldi r24, 0x20 
	out PORTD, r24
	sbi PORTD, PD3
	cbi PORTD, PD3
	ldi r24, 39
	ldi r25, 0
	rcall wait_usec
	ldi r24, 0x28 
	rcall lcd_command 
	ldi r24, 0x0e
	rcall lcd_command
	ldi r24, 0x01 
	rcall lcd_command
	ldi r24, low(1530)
	ldi r25, high(1530)
	rcall wait_usec
	ldi r24, 0x06 
	rcall lcd_command 
	ret

;***********************************************************************************************

keypad_to_ascii:								; logiko '1' stis theseis tou kataxwrhth r26 dhlwnoun ta parakatw sumvola kai arithmous
	movw r26 ,r24
	ldi r24 ,'*'
	sbrc r26 ,0
	ret
	ldi r24 ,'0'
	sbrc r26 ,1
	ret
	ldi r24 ,'#'
	sbrc r26 ,2
	ret
	ldi r24 ,'D'
	sbrc r26 ,3
	ret
	ldi r24 ,'7'
	sbrc r26 ,4
	ret
	ldi r24 ,'8'
	sbrc r26 ,5
	ret
	ldi r24 ,'9'
	sbrc r26 ,6
	ret
	ldi r24 ,'C'
	sbrc r26 ,7
	ret
	ldi r24 ,'4'								; logiko '1' stis theseis tou kataxwrhth r27 dhlwnoun ta parakatw sumvola kai arithmous
	sbrc r27 ,0
	ret
	ldi r24 ,'5'
	sbrc r27 ,1
	ret
	ldi r24 ,'6'
	sbrc r27 ,2
	ret
	ldi r24 ,'B'
	sbrc r27 ,3
	ret
	ldi r24 ,'1'
	sbrc r27 ,4
	ret
	ldi r24 ,'2'
	sbrc r27 ,5
	ret
	ldi r24 ,'3'
	sbrc r27 ,6
	ret
	ldi r24 ,'A'
	sbrc r27 ,7
	ret
	clr r24
	ret

